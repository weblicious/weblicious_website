/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
@import url("https://fonts.googleapis.com/css?family=Roboto:100,300,400,600");
@import url("https://fonts.googleapis.com/css?family=Raleway:200,400,500|Reem+Kufi");
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*
 * A partial implementation of the Ruby list functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb
 */
/*
 * A partial implementation of the Ruby constants functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb
 */
/*
 * A partial implementation of the Ruby display functions from Compass:
 * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb
 */
@-webkit-keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-30px);
    -moz-transform: translateY(-30px);
    -ms-transform: translateY(-30px);
    -o-transform: translateY(-30px);
    transform: translateY(-30px); }
  60% {
    -webkit-transform: translateY(-15px);
    -moz-transform: translateY(-15px);
    -ms-transform: translateY(-15px);
    -o-transform: translateY(-15px);
    transform: translateY(-15px); } }

@-moz-keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-30px);
    -moz-transform: translateY(-30px);
    -ms-transform: translateY(-30px);
    -o-transform: translateY(-30px);
    transform: translateY(-30px); }
  60% {
    -webkit-transform: translateY(-15px);
    -moz-transform: translateY(-15px);
    -ms-transform: translateY(-15px);
    -o-transform: translateY(-15px);
    transform: translateY(-15px); } }

@-o-keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-30px);
    -moz-transform: translateY(-30px);
    -ms-transform: translateY(-30px);
    -o-transform: translateY(-30px);
    transform: translateY(-30px); }
  60% {
    -webkit-transform: translateY(-15px);
    -moz-transform: translateY(-15px);
    -ms-transform: translateY(-15px);
    -o-transform: translateY(-15px);
    transform: translateY(-15px); } }

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    -webkit-transform: translateY(0);
    -moz-transform: translateY(0);
    -ms-transform: translateY(0);
    -o-transform: translateY(0);
    transform: translateY(0); }
  40% {
    -webkit-transform: translateY(-30px);
    -moz-transform: translateY(-30px);
    -ms-transform: translateY(-30px);
    -o-transform: translateY(-30px);
    transform: translateY(-30px); }
  60% {
    -webkit-transform: translateY(-15px);
    -moz-transform: translateY(-15px);
    -ms-transform: translateY(-15px);
    -o-transform: translateY(-15px);
    transform: translateY(-15px); } }

body {
  background: #ffffff;
  color: #333333;
  font-family: "Roboto", sans-serif; }

h1, h2, h3, h4, h5, h6 {
  margin: 0;
  font-family: "Raleway", sans-serif; }

#fp-nav {
  display: none; }
  @media (min-width: 800px) {
    #fp-nav {
      display: block; } }

.mainHeader {
  position: fixed;
  width: 100%;
  display: none;
  z-index: 100; }

.logo {
  transition: all .3s ease-out;
  display: block;
  text-align: center;
  height: 100px;
  position: relative;
  z-index: 1200; }
  .logo svg {
    width: 500px; }
  @media (min-width: 639px) {
    .logo {
      height: 210px; } }

h1 {
  margin: 0 auto;
  font-family: "Raleway", sans-serif, serif;
  text-align: center;
  font-size: 3.7rem;
  font-weight: 500;
  letter-spacing: -3px;
  line-height: 3rem;
  transition: all .3s ease-out;
  text-transform: uppercase; }
  h1 em {
    display: block;
    font-family: "Raleway", sans-serif;
    font-weight: 400;
    font-size: 2rem;
    text-transform: capitalize;
    font-style: normal;
    transition: all .3s ease-out; }
  h1:after {
    content: " ";
    display: block;
    background: #333333;
    width: 70px;
    height: 5px;
    margin: 4vh auto; }
  @media (min-width: 639px) {
    h1 {
      margin: 5vh auto 0 auto;
      font-size: 6.5rem;
      letter-spacing: -5px;
      line-height: 5rem; }
      h1 em {
        font-size: 4rem;
        letter-spacing: -2px; } }
  @media (min-width: 800px) {
    h1 {
      margin: 5vh auto 0 auto;
      width: 960px; } }

h2 {
  color: #ffffff;
  text-transform: uppercase; }
  h2 em {
    font-style: normal;
    font-weight: 200; }
    h2 em:before {
      content: "["; }
    h2 em:after {
      content: "]"; }
  @media (min-width: 639px) {
    h2 {
      font-size: 3rem; } }

p {
  font-weight: 100;
  font-size: 1rem; }
  @media (min-width: 639px) {
    p {
      font-size: 1.3rem; } }
  @media (min-width: 800px) {
    p {
      font-size: 1.2rem; } }

.button {
  cursor: pointer; }

.arrowDown {
  -webkit-animation: bounce 2s infinite;
  -moz-animation: bounce 2s infinite;
  -o-animation: bounce 2s infinite;
  animation: bounce 2s infinite;
  position: fixed;
  bottom: 10px;
  left: 50%;
  margin-left: -20px;
  width: 40px;
  height: 40px;
  line-height: 40px;
  text-align: center;
  border: 1px solid #333333;
  border-radius: 50%;
  z-index: 1000;
  color: #333333; }
  .arrowDown span {
    display: none; }
  @media (min-width: 639px) {
    .arrowDown {
      bottom: 25px; } }
  @media (min-width: 1920px) {
    .arrowDown {
      bottom: 50px; } }

.weblicious .overlayer {
  content: "";
  background-color: #222222;
  width: 100%;
  height: 100vh;
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1000; }

.weblicious .geometry {
  position: absolute;
  top: 0;
  display: none; }
  @media (min-width: 800px) {
    .weblicious .geometry {
      display: block; } }

.weblicious h1 {
  position: relative;
  z-index: 10;
  top: 1vh; }

.weblicious .contactButton {
  cursor: pointer;
  position: relative;
  z-index: 220;
  display: block;
  width: 180px;
  text-align: center;
  margin: 50px auto 50px auto;
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 400;
  color: #ffffff;
  background: #333333;
  border: 1px solid #333333;
  line-height: 50px; }
  .weblicious .contactButton:before {
    content: " ";
    display: block;
    background: #ffffff;
    width: 0px;
    height: 50px;
    position: absolute;
    transition: all .2s ease-out; }
  .weblicious .contactButton:after {
    content: "Get In Touch";
    width: 180px;
    position: absolute;
    top: 0;
    left: 0;
    transition: all .5s ease-out;
    color: #ffffff;
    font-weight: 400; }
  .weblicious .contactButton:hover:before {
    width: 180px; }
  .weblicious .contactButton:hover:after {
    color: #333333; }

.section2 {
  overflow: hidden;
  border-bottom: 8px solid #4F1633;
  position: relative; }
  .section2 .wrapper {
    width: 91.52542%;
    float: left;
    margin-right: 1.69492%;
    z-index: 500;
    position: relative;
    padding: 5vh 0 0 5vw; }
    .section2 .wrapper p {
      color: #ffffff; }
    @media (min-width: 639px) {
      .section2 .wrapper {
        padding: 7vh 0 0 5vw; } }
    @media (min-width: 800px) {
      .section2 .wrapper {
        width: 57.62712%;
        float: left;
        margin-right: 1.69492%;
        padding: 15vh 0 0 5vw; } }
    @media (min-width: 1279px) {
      .section2 .wrapper {
        width: 40.67797%;
        float: left;
        margin-right: 1.69492%;
        padding: 15vh 0 0 5vw; } }
    @media (min-width: 1920px) {
      .section2 .wrapper {
        width: 32.20339%;
        float: left;
        margin-right: 1.69492%; } }
  .section2 .tigascene, .section2 .layer {
    padding: 0;
    margin: 0;
    text-indent: -9999px; }
  .section2 ul .layer {
    height: 100vh;
    width: 100vw; }
  .section2 ul .img1 {
    width: 100vw;
    height: 100vh;
    background: url(../images/badass-website-bg.jpg) no-repeat -25vw 0vh;
    background-size: cover; }
    @media (min-width: 639px) {
      .section2 ul .img1 {
        background-position: -40vw 0; } }
    @media (min-width: 800px) {
      .section2 ul .img1 {
        background-position: 0 center; } }
    @media (min-width: 1279px) {
      .section2 ul .img1 {
        background-position: center center; } }
  .section2 ul .img2 {
    width: 110vw;
    height: 100vh;
    background: url(../images/badass-website-tiga2.png) 60% 35vh no-repeat;
    background-size: cover; }
    @media (min-width: 639px) {
      .section2 ul .img2 {
        background-position: -90vw 30vh; } }
    @media (min-width: 800px) {
      .section2 ul .img2 {
        background-position: -15vw 30vh; } }
    @media (min-width: 1279px) {
      .section2 ul .img2 {
        background-position: -5vw 10vh; } }
  .section2 ul .img3 {
    width: 100vw;
    height: 100vh;
    background: url(../images/badass-website-lines.png) 100% 0 no-repeat;
    background-size: cover; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
